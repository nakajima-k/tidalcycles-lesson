hush

fibs :: [Integer]
fibs = 0:1:zipWith (+) fibs (tail fibs)

fibs

getNow >>= putStrLn . show . floor

factorial        ::  Integer -> Integer
factorial (n+1)  =   (n+1) * factorial n
factorial 0      =   1

do
 let now = (getNow >>= putStrLn . show . floor)
 d1 $ s "bd"
 now

d1 $ stack[
 s "bd(<3 3 3 5>,8)"
 ,s "bd:1(<3 3 3 5>,8)"
 ,fast "<1 1 1 4>" $ s "hc <hc hc hh hc:4> ~"
 #gain "1.1" # pan 0
 ,fast "<1 1 1 4>" $ s "hc <hc hc hh hc:4> ~"
 #gain "1.1" # pan "1"
 ,every 4 (rev) $ every 6 (fast 2)
 $ s "h:6(<3 4 2 4 2 2>,8)" # nudge "-0.05" # cut "1"
 ,every 4 (chop 16)
 $ s "h:4(<3 4 2 4 2 2>,8)" # nudge "-0.05" # cut "1"
]

d3$ palindrome $ n "d2 b3 ~a4" # s "tutorial4"

d1 $ stack[
 s "bd bd bd ~"
 , s "~[mt [hc ~ hc <cp sn*4>]]"
]

d1 $ slow 2 $ stack [
  cat [
   s "~ [mt can] ~ hc"  # n (irand 2)
   ,s "bd [mt can] ~ [hc ho]" # n (irand 3)
  ]
  ,cat [
   s "~ ~  [[mt:5 can:5] hc] ~"  # n (irand 2)
   ,s "~  ~ [mt:5 can:5] feel" # pan "0"
  ]
]

t1 (xfadeIn 8) $ brak $ every 2 (rev) $ sound "[bd:3 [hh bd:2]] feel:3 cp cp"
# speed "-2 1.5 0.9 2"


d1 $ every 2 (rev) $ sound "[bd:3 [hh bd:2]] feel:3 cp cp"
# speed "-2 1.5 0.9 2"

d2 $ sound "feel(3,8)" # pan "0.7"
# cutoff "10000" # gain "1.1"

d2 $ stack [sound "feel(3,8)" # pan "0.7"
# cutoff "10000" # gain "1.1"
,s "~hc ~hc"
]

d2 $ sound "ext:3 ext:2 [ext:2 ext:2] ext:2/4"
# gain "0.7" # speed "-1 2 1 0.5"
# room "0.9"

d2 $ sound "feel(4,7,12)" # gain "1.2"

d2 $ sound "bd sn" # pan "0.9"

d9 $ sound "metal metal metal metal" # gain "0.9"
# speed "2 1 1 1"

d1 $ stack [
 slow 2 $ sound "bd ~ ~ bd ~ ~ bd ~" # pan "0.6" # gain "1.2",
 sound "sax ~ ~ sax:2 ~" # speed (choose [-1, 0.5, -0.5, 1.5]) # gain "0.8"
]


d1
$ iter 4 $ superimpose ((density 1.5))
$ stack [
 every 2 (rev) $ sound "bd:2 [bd:3 ~ ~ bd]/2",
 sound "auto:5 auto:4 auto:3 ~"
  # speed "0.75 0.5",
  every 3 (density 4) $ sound "808:1*4",
  every 4 (slow 2) $ sound "amencutup:2 amencutup:2 ~ [~ amencutup:3]"
] |*| gain "0.8 1 1 1 0.8 1 1 1"
# coarse "3"

d1 $ stack [
 every 4 (slow 2)
 $ every 4 (brak) $ slow 1 $ sound "amencutup ~ [amencutup:2 ~ amencutup:3] ~"
 # speed "-1 2 0.5 2"
 # gain "1.0" # shape "0.8"
 # pan "0.7",
 sound "~ hc cp hc" # pan "0.2",
 sound "bd ~ bd:3 bd"
 # gain "1.0" # shape "0.8"
]

d1 $ jux (rev)
$ stack [
 every 4 (slow 2)
 $ every 4 (brak) $ slow 1 $ sound "amencutup ~ [amencutup:2 ~ amencutup:3] ~"
 # speed "-1 2 0.5 2"
 # gain "1.0" # shape "0.8"
 # pan "0.7",
 sound "~ hc cp hc" # pan "0.2",
 sound "bd ~ bd:3 bd"
 # gain "1.0" # shape "0.8"
]

d4 $ sound "hh hh hh [hh hh hh] hh hh"
# shape "0.8"

d1 $ stack [
 every 4 (slow 2)
 $ every 2 (rev) $ slow 2 $ sound "[amencutup:2 ~] [[amencutup:2 ~ amencutup:3] ~ amencutup:5]"
 # speed "-1 2 0.5 2"
 # gain "1.0" # shape "0.8"
 # pan "0.7",
 sound "~ hc:2*3 cp:3 ~" # pan "0.2",
 sound "bd bd:2 ~ bd"
 # gain "1.0" # shape "0.8"
]

d1 $ stack [
 slow 2 $ sound "bd ~ ~ bd ~ ~ bd ~" # pan "0.6" # gain "1.2",
 sound "sax ~ ~ sax:2 ~" # speed (choose [-1, 0.5, -0.5, 1.5]) # gain "0.8"
]

d2 $ slow 2 $ n "c3 ~ ~ ~ ~ ~ ~ ~" # sound "tutorial4" # pan "0.5" # gain "1.3"

d2 $ slow 2 $ n "~ ~ c2 b2 ~ c3 ~ ~" # sound "tutorial4" # pan "0.5" # gain "1.3"

d1 $ sound "bd ~ bd ~" # pan "0.6" # gain "1.2"
d2 $ n "c2 ~ b2 c3" # sound "tutorial4" # pan "0.5" # gain "1.3"

d3 $ stack [
stut 5 0.3 (0.2) $ every 8 (const (sound "cp cp cp:1 ~"))
$ sound "~ hc ~ hc" # pan "0",
sound "~ hh ~ hh" # pan "1" # gain "1.2"
]

d5 $ sound "glitch:2/2 ~"

d2 $ n "c2 ~ ~ b2 ~ c3 ~ ~" # sound "tutorial4" # pan "0.5" # gain "1.3"

d2 $ n "c2 ~ c3 b3 c3 ~ c4 ~" # sound "tutorial4" # pan "0.5" # gain "1.3"
# sustain "0.2 0.5 1 0.2"

d4 $ sound "hh hh hh hh hh hh hh hh"
d5 $ sound "glitch:2/2 cp" # room "1.2"

d4 $ every 4 (stut 4 0.4 (0.6)) $ sound "hh hh hh hh hh hh hh hh"

d2 $ n "c3 c3 c3?  ~" # sound "tutorial4" # pan "0.5" # gain "1.3"
# sustain "0.2 0.5? 0.2"

d2 $ n "c2 ~ c3 cs4 c3 ~ c4 ~" # sound "tutorial4" # pan "0.5" # gain "1.3"
# sustain "0.2 0.5 1 0.2"

t1 (xfadeIn 16) $ stack[
 sound "hh:3 voodoo:3 ~ ~ hh:3 ~ ~ hh:2" # pan "0",
 sound "hh:3 voodoo:3 ~ hh:3 ~ ~ ~ hh:2" # pan "1"
]

d1 $ stack[
 sound "hh:3 voodoo:3 ~ ~ hh:3 ~ ~ hh:2" # pan "0",
 sound "hh:3 voodoo:3 ~ hh:3 ~ ~ ~ hh:2" # pan "1",
 sound "bd ~ ~ bd ~ h:1/2 bd ~" # pan "0.6" # gain "1.1"
 # shape "0.8"
]

d4 $ sound "glitch:3*8" # pan sine1

d1 $ sound "hh*32" # cutoff (scale 300 1000 $ slow 4 $ sine1) # resonance "0.4" # pan sine1
d3 $ sound "hh*32" # cutoff (scale 0.1 700 $ slow 8 $ sine1) # resonance "0.1"

t5 (xfadeIn 16) $ slow 2 $ sound "mt [mt:2 ~] ~ [sn:1 mt] mt:4 ~ [mt:2 mt] ~"

d3 $ slow 2 $ sound "[808:2 cp] ~ [hc cp:2 ~ mt] ~"

d1 $ sound "bass:2/2 bass/2 bass/2 ~" # shape "0.9"

d1 $ stack [
sound "bass:2/2 bass/2 bass/3 ~" # shape "0.9" # pan "0.6",
sound "bd/2 bd/4 bd/2 ~" # shape "0.9" # pan "0.4"
]

d3 $ slow 2 $ sound "[808:2 cp] ~ [hc cp:2 ~ mt] ~"

t4 (xfadeIn 16) $ n "[c4 d5 ~] ~ [g5 a4 b5] [~ c2]"
# sound "supergong" # sustain (choose [0.5,1,2,0.04])

d4 $ every 2 (jux(rev)) $ n "[c4 d6 ~] ~ [g5 a4 b5] [~ c2]"
# sound "supergong" # sustain (choose [0.5,1,2,0.04])

solo $ d4 $ jux (slow 2) $ every 2 (jux(rev)) $ n "[c4 e6 ~] ~ [g5 a6 b5] [~ c2]"
# sound "supergong" # sustain (choose [0.5,1,2,0.04])

d1 $ stack[
 sound "hh:2 voodoo:1 ~ ~ hc:3 ~ ~ mt:2" # pan "0",
 sound "hh:3 voodoo:2 ~ hh:3 ~ ~ ~ can:2" # pan "1"
]

d1 $ stack[
 sound "hh:2 voodoo:1 ~ ~ can:3 ~ ~ mt:2" # pan "0",
 sound "hh:3 voodoo:2 ~ hh:3 ~ ~ ~ can:2" # pan "1",
 slow 4 $ sound "bd:4 ~ ~ ~ bd:2 ~ bd:3 ~" # shape "0.9"
]

hush

solo $ d1 $ stack[
 sound "hh:3 voodoo:3 ~ ~ hh:3 ~ ~ hh:2" # pan "0",
 sound "hh:3 voodoo:3 ~ hh:3 ~ ~ ~ hh:2" # pan "1"
]
-- huskell
[x | x<-[10..20],x/=13,x/=15]
[x*y | x <- [2,5,10],y <- [8,10,11]]

let xxs = [[1,3,5,2,3,1,2,4,5],[1,2,3,4,5,6,7,8,9],
          [1,2,4,2,1,6,3,1,3,2,3,6]]
[[x | x<- xs, even x] | xs <- xxs]
--taple
(1,3)
(3,'a',"hello")
(50,50.4,"hello",'b')
[1,2]
fst (8,11)
fst ("Wow",False)
snd (8,2)

zip [1..10]["apple","orang","chery","mango"]
let triples = [(a,b,c) | a<- [1..10],b<-[1..10],c<-[1..10]]
let rightTriangles = [(a,b,c)| c<-[1..10],a<-[1..c],b<-[1..a],a^2 + b^2 == c^2,a+b+c==24]
rightTria:ngles

:t 'a'
:t True
:t "HELLO"
:t (True,'a')
:t 4 == 5
removeNonUppercase st = [c | c <- st,c `elem` ['A'..'Z']]


d1 $ sound "bd ~ ~ bd ~ ~"

d2 $ sound "[] hh [] hh"

d2 $ sound "[hh ~ hh] hh [] hh"

d3 $
jux (rev) $
stack [
sound " [] [] arpy [] []" # pan "0.9",
--sound " [hh hh hh] [] [] [] [arpy:2 arpy:3]" # pan "0.5 0.6 0 1",
sound "bd [mt sn:3] cp []" # pan "0.1",
sound "[] [] future [] [] [] [arpy:5 arpy:2 arpy:4] []"
]

d3 silence
d2 silence
hush

d1 $ every 4 (|=| speed "2") $ every 8 (rev)  $ sound "arpy arpy" # speed "0.4 1" # pan rand

d3 $ every 4 (|=| speed "2") $ sound "hh mt:2 ~ [mt:4 mt] ~ mt:2 " # pan "0.3"

d1 $ sound "bd cp"

d1 $ sound "bd*8 sn*8" # speed (scale 1 3 $ tril)
d1 $ sound "bd*8 sn*8" # speed (slow 4 $ scale 1 3 $ tril)
d1 $ sound "bd*8 sn*8" # speed (scale 4)

d1 $ sound "hh*32" # cutoff (scale 300 1000 $ slow 4 $ sine1) # resonance "0.4" # pan sine1
d1 $ sound "hh*32" # cutoff (scale 0.1 700 $ slow 8 $ sine1) # resonance "0.1"

d3 $ sound "{bd hh sn cp,arpy bass2 drum notes can}"
d3 $ sound "{bd hh sn cp,~ ~ ~ ~ ~}"
d3 $ sound "{~ ~ ~ ~,arpy bass2 drum notes can}"
d3 $ sound "{arpy bass2 drum notes can,bd hh sn cp}"
d3 $ sound "{arpy bass2 drum notes can}"
d3 silence
d1 $ (0.25 <~) $ sound "bd*2 cp*2 hh sn"
d1 $ sound "bd*2 cp*2 hh sn"
d1 $ every 3 (0.25 ~>) $ sound "bd*2 cp*2 hh sn"
d1 $ every 3 (0.4 ~>) $ sound "bd cp can bass2 sn"
d1 $ sound "~ arpy ~ arpy ~ arpy ~ arpy" # pan (rand) # gain 0.9
d1 $ sound "arpy*4" # pan (scale 0.25 0.75 $ rand)
d1 $ sound "arpy*8" # n (irand 50) # gain "0.9" # pan "0.6"
d2 $ s "hh*4? [hh cp?] hh*4? [hh cp?]" # pan (scale 0.1 0.9 $ rand)
d2 $ sometimesBy 0.25 (slow 2) $ s "hh*4? [hh cp?] hh*4? [hh cp?]" # pan (scale 0.1 0.9 $ rand) # gain "1.2"
d2 $ s "[bd sn cp hh]?"
d3 $ s "bd*16?"
d3 $ degradeBy 0.25 $ s "bd*16"
d3 $ sometimesBy 0.75 (slow 2) $ sound "bd*16"
d1 silence
d3 silence
d2 silence
d1 $ every 5 (|+| speed "0.5") $ every 4 (0.25 <~) $ every 3 (rev) $ s "mt mt:2 arpy*2 can" # speed "[1 1.25 0.75 -1.5]/3"
d1 $ whenmod 8 6 (rev) $ s "bd*2 arpy*2 cp hh*22"
d1 $ every 8 (rev) $ every 4 (density 2) $ s "bd hh sn cp"
d1 $ whenmod 16 14 (# speed "2") $ s "bd arpy*2 cp bass2"
d1 $ every 4 (const (s "cp*3")) $ sound "bd [mt? sn mt:2? mt:4?] cp*2? hh*4?"
d1 $ every 8 (const $ s "bd*4 sn*2") $ s "bd mt hh*4 can mt"
d1 $ s "cp"
d1 $ cat [s "bd sn" # vowel "[a o]/2",s "casio casio*2",s "drum drum drum drum"]
d1 $ stack [sound "bd sn mt cp" # vowel "[a i]/2" # gain "1.2" # pan "0.4",s "casio casio*2" # pan "0.3" # gain "0.7",sound "~ drum ~ drum", sound (samples "arpy*8" (run 16))]

d1 $ stack [sound "bd bd*2",
 sound "hh*2 [sn cp] cp future*4",
 sound (samples "arpy*8" (run 16))]

 d1 $ every 4 (slow 2) $ whenmod 5 3 (# speed "0.75 1.5") $ stack [sound "bd bd*2",
  sound "hh*2 [sn cp] cp future*4",
  sound (samples "arpy*8" (run 16))] # speed "[[1 0.8],[1.5 2]/5]"


d1 $ sound (samples "arpy*8" (run 8)) # speed "0.2" # cut "0.2"
d1 $ stack [
   sound (samples "arpy*8" (run 8)) # speed "0.25" # cut "1",
   sound (samples "bass2*6" (run 6)) # speed "0.5" # cut "2"
   ]

d2 $ stack [
    slow 2 $ sound "bd ~ ~ bd ~ ~ bd ~" # pan "0.6" # gain "1.2",
    sound "sax ~ ~ sax:2 ~" # speed (choose [-1, 0.5, -0.5, 1.5]) # gain "0.8"
]

hush

d1 $ sound (samples "hc*8" (iter 4 $ run 4))
t1 anticipate $ sound (samples "bd(2,8) cp" (run 3)) # gain "1.2"
t1 anticipate $ sound "{hh hh cp hh,bd bd bd ~ bd ~,hh*4}" # pan rand
t2 (xfadeIn 16) $ sound "bd*16?"
d1 $ midinote "90 100" # sound "sine"
d1 $ n "c5" # s "sine"
bps (120/60)

-- huskell

putStrLn "test"
mysum [] = 0
let (x:xs) = [1,2,3]
mysum(x:xs) = x + mysum xs


-- haskell 基礎
let weekdays = ["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]

weekdays

del weekdays[2]

weekdays.insert(6,"Rhino")
